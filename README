Description for cybersecuritybase project 1

The project is based on the provided startercode (https://github.com/cybersecuritybase/cybersecuritybase-project) and can be imported into Netbeans. All the flaws can be found using OWASP ZAP. 
I use version 2.5.0.

The port used by the project is 8080. So OWASP ZAP needs to use an other port, for instance 8081. Set the port in ZAP under Tools-> Options -> Local Proxy -> Port 8081
Set the port of the ZAP proxy in your browser, in Chromium: hamburger menu -> Settings -> Show advanced settings... -> Network -> Change proxy settings
Check if ZAP logs your traffic by going to http://localhost:8080/admin.
Under sites http://localhost:8080 should be visible now.

Broken Authentication and Session Management

Vulnerability predictable session id (1)


Identifying the flaw


To find this flaw, you have to use the OWASP ZAP addon "Token generation and analysis".

If this addon it is not already installed, install it first:
Click on the manage addons button (the blocks icon, left to the lightbulb)
Click on the marketplace tab
Select "Token generation and analysis"
Click "Install selected"


1. Close the browser and start the browser again in private mode.
2. Go to http://localhost:8080/admin in the browser.
3. The browser will be redirected to http://localhost:8080/login
4. Go to OWASP ZAP
5. In the lower tab go to the line with URL http://localhost:8080/admin with tag "SetCookie"
6. Right click on this line and click on Generate tokens
7. Click the generate button
8. In the Analyse tokens screen the Line Maximum entropy with a red flag an Summary "Deterministic"? should now be visible
9  In the Details tab of the Analyse tokens screen this should be visible: 
---------------
Maximum entropy
---------------
Maximum theoretical entropy: 0.0

Click on the Token Gen tab, here you can see the token does not have enough entropy since it's not generated by a PRNG but 
is based on the time.

How to fix:

Delete the function @bean public EmbeddedServletContainerFactory servletContainer() in the file sec.project.CyberSecurityBaseProject.java.
Delete the function @Override protected synchronized String generateSessionId() in the file sec.project.CyberSecurityBaseProject.java.
Now the default session id generation algorithm is used.




Insecure Direct Object References


Signups and admin page is not protected with logon (2)

Identifying the flaw

1. Start a new ZAP session (File -> New Session).
2. Close the browser and start it again in private mode.
3. In the browser goto localhost:8080/admin.
4. Login with username "bart" password "password".
5. See there is a link Signups, this link should only be able to be accessed by the admin.
6. Close the browser and open it again in private mode, so you are no longer logged in.
7. Go to the page http://localhost:8080/signups
8. You should still be able to see the signups page.

How to fix

In sec.project.config.SecurityConfiguration.java, replace:
http.authorizeRequests()
                .antMatchers("/admin").authenticated()
                //this allows us the access all other resources unauthenticated
                .anyRequest().permitAll();
        
        http.formLogin()
                .permitAll();
With:

     http.authorizeRequests()

                            .antMatchers("/login", "/form", "/done", "/").permitAll()
                                .anyRequest().authenticated() 
                                        .and()
                                        .formLogin();

Now only login, form, done pages and the root are permited to be accessed without logging in.
All other pages require a form login.

Cross-Site Scripting (XSS)

Vulnerability XSS in signups (3)


Identifing the flaw

1. Start a new ZAP session (File -> New Session).
2. Close the browser and start it again in private mode.
3. Go to http://localhost:8080/admin
4. The browser will be redirected to http://localhost:8080/login
5. Login with username bart and password password
6. Go to OWASP ZAP
7. Click on Sites
8. Right click on http://localhost:8080
9. Click on Attack -> "Active Scan..."
10. Click on "Start Scan"
11. Wait untill the scan has finished
12. Click on the Alerts tab
13. Click on "Cross Site Scripting (Persistent)(2)"
14. Click on the first "GET: http://localhost:8080/signups"
15. Click on the first "GET: http://localhost:8080/signups"
16. Observe there is a Parameter address and name

How to fix

In "Other Sources" src/main/resource/signups.html replace the two instances of 
	th:utext
with 
	th:text

This changes the ouput from unescaped to escaped text.


Cross-Site Request Forgery (CSRF) (4)

The "Active scanner rules (beta)" and "Passive scanner rules (alpha)" addons have to be installed.

Identifying the flaw

1. Start a new ZAP session (File -> New Session).
2. Close the browser and start it again in private mode.
3. Go to http://localhost:8080/admin
4. The browser will be redirected to http://localhost:8080/login
5. Login with username "bart" and password "password"
6. Go to OWASP ZAP
7. Click on Sites
8. Right click on http://localhost:8080
9. Click on Attack -> "Active Scan..."
10. Click on "Start Scan"
11. Wait untill the scan has finished
12. Click on the Alerts tab
13. Click on Anti CSRF Token Scanner
14. Click on Get:http://localhost:8080/form




How to fix

CSRF detection is disabled in sec.project.config.SecurityConfiguration.java http.csrf().disable(); remove this line.


Unvalidated Redirects and Forwards (5)


Identifing the flaw

1. Start a new ZAP session (File -> New Session).
2. Close the browser and start it again in private mode.
3. Go to http://localhost:8080/admin
4. The browser will be redirected to http://localhost:8080/login
5. Login with username "bart" and password "password"
6. Go to OWASP ZAP
7. Click on Sites
8. Right click on http://localhost:8080
9. Click on Attack -> "Active Scan..."
10. Click on "Start Scan"
11. Wait untill the scan has finished
12. Click on the Alerts tab
13. Click on "External Redirect"
14. Here you can see there is an external redirect: 
"http://localhost:8080/redirect?uri=http%3A%2F%2F1551986429474458788.owasp.org"

How to Fix

In Source Packages sec.project.controller.SignupController remove the function:
@RequestMapping(value = "/redirect", method = RequestMethod.GET)
    public String redirect(@RequestParam String uri)


In the function public String submitAddEventForm(@RequestParam String name, @RequestParam String address)
replace
	return "redirect:/redirect?uri=/admin";
with 
	return "redirect:/admin";

Now the open unvalidated redirect is removed.
